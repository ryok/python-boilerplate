# Cline Rules

## ロール定義

あなたは熟練のPythonプログラマとして、エンタープライズ向けの高品質な開発を行ってください。


## 期待する回答

- 実装コードは省略せず、完全な形で提供すること
- コードの意図、設計、運用を考慮した詳細な日本語での説明を記載すること


## 注意事項

### 設計書

- 新規開発時は docs/ ディレクトリ以下に以下の内容を含む design.md を作成してください：
  - 要件定義書（業務要件・非機能要件・データ要件）
  - 設計書（システム概要・機能設計・クラス構成・データモデル・API設計）
  - セキュリティ考慮事項（アクセス制御・データ保護・依存ライブラリの管理）
  - 運用設計（ログ・監視・エラーハンドリング・リカバリ方針）
- 既存のソフトウェアを修正する場合：
  - 既存の設計書を参照して開発すること
  - 修正内容に応じて設計書を最新化すること
- 設計書作成後、コード作成前に 必ずユーザーに設計レビューを依頼 してください

### コーディング規約

- PEP8 に準拠 したコードを書くこと
- ruffのフォーマッタでファイルの保存と同時に自動整形するので、フォーマットの修正は不要です
- Google スタイルの Docstring を記述すること
- 関数やクラスには適切な Docstring を記述すること
- 関数やクラスの引数や戻り値には型アノテーションを記述すること
- 関数やクラスの引数には型ヒントを記述すること
- 関数やクラスの引数にはデフォルト引数を使わないこと
- 関数やクラスの引数には可変長引数を使わないこと
- 関数やクラスの引数には可変キーワード引数を使わないこと
- 関数やクラスの引数にはアスタリスクを使わないこと
- 関数やクラスの引数にはアンパサンドを使わないこと
- 例外処理を適切に行う こと（エラーメッセージを明確にし、ログ出力する）
- ログ出力を適切に行うこと（ログレベルを適切に設定し、ログファイルに出力する）
- セキュリティを考慮する （入力値のバリデーション、依存ライブラリの管理）

### テストコード

- テストコードを tests/ ディレクトリ以下に src/ ディレクトリと同じ構成で作成 すること
- pytest を用いたユニットテストを必須とする。エラーが出たら修正してください
- カバレッジ基準：
  - 重要なロジック部分のカバレッジ 90%以上を維持すること
  - pytest --cov でカバレッジを測定し、レポートを作成すること
- 統合テスト（API/DB）も必要に応じて実装 すること

### Git操作

- git status でステータス確認を徹底し、慎重にコミットを行うこと
- ファイルの移動・削除は git mv や git rm を使用すること
- コミットメッセージのルール:
  - [feat] 新機能追加
  - [fix] バグ修正
  - [refactor] コードリファクタリング
  - [test] テスト追加/修正
  - [docs] ドキュメント修正
  - [chore] 環境設定変更やCI/CD設定変更

### Pull Request(PR)

#### PR作成時
- git diff で変更点を確認後、gh pr create で PR を作成すること
- PR の description は .github/pull_request_template.md に準拠すること
  - 必須記載事項:
  - 変更の概要
  - 関連する課題（Issue番号）
  - 影響範囲
  - 動作確認手順
  - テストの有無

#### PRレビュー時
以下の手順でファイルごとにコメントを付けてください：

1. チェックする観点は .github/pull_request_template.md を参照してください
2. PRの差分を確認:
   ```bash
   gh pr diff <PR番号>
   ```

3. ファイルごとに、変更後のファイル全体とPRの差分を確認した上でレビューコメントを追加:
   ```bash
   gh api repos/<owner>/<repo>/pulls/<PR番号>/comments \
     -F body="レビューコメント" \
     -F commit_id="$(gh pr view <PR番号> --json headRefOid --jq .headRefOid)" \
     -F path="対象ファイルのパス" \
     -F position=<diffの行番号>
   ```

   パラメータの説明：
   - position: diffの行番号（新規ファイルの場合は1から開始）
   - commit_id: PRの最新のコミットIDを自動取得

### CI/CD と運用

- GitHub Actions を活用し、以下のチェックを自動実行すること
  - ruff によるコードフォーマットチェック
  - mypy による型チェック
  - pytest によるテスト実行
  - pytest --cov によるカバレッジ測定（閾値未満なら警告）
- デプロイ前のチェック
  - ステージング環境でテストを実施すること
  - バックアップ・ロールバック手順を確認すること
  - データ移行（DB Migration）がある場合は、影響範囲を明確にすること